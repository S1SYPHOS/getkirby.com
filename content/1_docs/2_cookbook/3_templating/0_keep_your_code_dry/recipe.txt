Title: Quicktip: Don't repeat the same query multiple times

----

Published: 2020-11-15

----

Description: Don't repeat yourself is a coding paradigm that when not heeded can seriously harm performance.

----

Text:

Modularizing your code into resusable chunks to keep things organized and not repeat yourself is an important coding paradigm.

However, what is true for the big picture, is also true for the smaller chunks of code we produce daily in our templates.

Here is a simple example of what we see quite often:

We define a variable in our controller and pass it to the template:

```php "/site/controllers/blog.php"
<?php

return function($page) {
  $articles = $page->articles()->listed();
  return [
    'articles' => $articles,
  ];
};
```

And then in the template:

```php "/site/temlates/blog.php"
<?php
foreach($page->articles()->listed() as $article) {
  echo $article->title();
}
?>
```

What's wrong here? And why is this a problem? Although we defined the variable in the controller, instead of now using this variable in the template, we use the same query again.

This means that Kirby has to perform the same query twice instead of using the result stored in the variable.

Furthermore, this often results in unexpected behaviour if the logic in our controller is a bit more complex.

Consider this:

```php "/site/controllers/blog.php"
<?php

return function($page) {
  $articles = $page->articles()->listed();
  if($tag = param('tag')) {
    $articles = $articles->filterBy('tags', $tag, ',');
  }
  return [
    'articles' => $articles,
  ];
};
```

If we now use the same template code as in the example above, the filter will never take effect.

Our template should therefore look like this:

```php "/site/temlates/blog.php"
<?php
foreach($articles as $article) {
  echo $article->title();
}
?>
```

Let's consider another example from our cookbook, the (link: text: treemenu snippet) in an extended version with many additional conditional attributes:

```php
<?php if(!isset($subpages)) $subpages = $site->children(); ?>

<?php foreach($subpages->listed() as $p) : ?>

	<li class="depth-<?= $p->depth() ?><?= $p->depth() === 1 ? ' nav-item ' . $p->pageRootClass() : '' ?>
		<?= $p->hasListedChildren() && $p->depth() < 2 ? ' dropdown ' :'' ?>
		<?= $p->hasListedChildren() ? ' has-dimmer ' :'' ?>">
		<a class="nav-link<?= $p->depth() > 1 ? ' dropdown-item ' : '' ?>
				<?= !$p->isActive() ? '' : ' active ' ?>
				<?= $p->hasListedChildren() && ! $p->depth() < 2 ? ' dropdown-toggle ' :' icon-arrow '?>"
			href="<?= $p->url() ?>">
			<?= $p->title() ?>
		</a>
		<?php if($p->hasListedChildren() && $p->depth() < 3): ?>
			<ul id="dropdown-<?= md5($p->url()) ?>"
			 	class="dropdown-menu | dropdown-menu-dark
				<?= $p->hasListedChildren() && $p->depth() >= 2 ? ' submenu ' : '' ?>">
				<?php snippet('treemenu', ['subpages' => $p->children()]); ?>
			</ul>
		<?php endif ?>
	</li>
<?php endforeach ?>
```

This example is already shortened as there were orginally a few more conditions. The same two queries for `$p->hasChildren()` and `$p->depth()` are used over and over again. The fact that this treemenu snippet works recursively, i.e. the snippet calls itself again for each level, makes this even worse. The result can quickly be a serious performance issue that is aggravated with each level in the recursion.

We should therefore fix this and store the result of our queries in variables, then replace the repeated queries with these variables:

```php
<?php if(!isset($subpages)) $subpages = $site->children(); ?>

<?php foreach($subpages->listed() as $p) : ?>
    <?php
    $depth             = $p->depth();
    $hasListedChildren = $p->hasListedChildren()
    ?>
	<li class="depth-<?= $depth ?><?= $depth === 1 ? ' nav-item ' . $p->pageRootClass() : '' ?>
		<?= $hasListedChildren && $depth < 2 ? ' dropdown ' :'' ?>
		<?= $hasListedChildren ? ' has-dimmer ' :'' ?>">
		<a class="nav-link<?= $depth > 1 ? ' dropdown-item ' : '' ?>
				<?= !$p->isActive() ? '' : ' active ' ?>
				<?= $hasListedChildren && ! $depth < 2 ? ' dropdown-toggle ' :' icon-arrow '?>" 
			href="<?= $p->url() ?>">
			<?= $p->title() ?>
		</a>
		<?php if($hasListedChildren && $depth < 3): ?>
			<ul id="dropdown-<?= md5($p->url()) ?>"
			 	class="dropdown-menu | dropdown-menu-dark
				<?= $hasListedChildren && $depth >= 2 ? ' submenu ' : '' ?>">
				<?php snippet('treemenu', ['subpages' => $p->children()]); ?>
			</ul>
		<?php endif ?>
	</li>
<?php endforeach ?>
```